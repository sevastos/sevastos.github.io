@import "compass";

// Until compass gem is updated to include CSS3 animation
// Taken from https://github.com/ericam/compass-animation/blob/master/stylesheets/animation/_shared.scss
//
@mixin set-experimental-support($moz: false, $webkit: false, $ms: false, $o: false, $khtml: false) {
  $experimental-support-for-mozilla: $moz;
  $experimental-support-for-webkit: $webkit;
  $experimental-support-for-microsoft: $ms;
  $experimental-support-for-opera: $o;
  $experimental-support-for-khtml: $khtml;
}

@mixin with-only-support-for($moz: false, $webkit: false, $ms: false, $o: false, $khtml: false) {
  // Capture the current state
  $original-moz: $experimental-support-for-mozilla;
  $original-webkit: $experimental-support-for-webkit;
  $original-o: $experimental-support-for-opera;
  $original-ms: $experimental-support-for-microsoft;
  $original-khtml: $experimental-support-for-khtml;

  @include set-experimental-support($moz, $webkit, $ms, $o, $khtml);

  @content;

  @include set-experimental-support($original-moz, $original-webkit, $original-ms, $original-o, $original-khtml);
}



// @private css3-feature-support variables must always include a list of five boolean values
// representing in order: -moz, -webkit, -ms, -o, -khtml.
$animation-support: -moz, -webkit, not -ms, -o, -khtml;


// Name of any animation as a string.
$default-animation-name             : null !default;

// Duration of the entire animation in seconds.
$default-animation-duration         : null !default;

// Delay for start of animation in seconds.
$default-animation-delay            : null !default;

// The timing function(s) to be used between keyframes. [ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier($number, $number, $number, $number)]
$default-animation-timing-function  : null !default;

// The number of times an animation cycle is played. [infinite | $number]
$default-animation-iteration-count  : null !default;

// Whether or not the animation should play in reverse on alternate cycles. [normal | alternate]
$default-animation-direction        : null !default;

// What values are applied by the animation outside the time it is executing. [none | forwards | backwards | both]
$default-animation-fill-mode        : null !default;

// Whether the animation is running or paused. [running | paused]
$default-animation-play-state       : null !default;


// Create a named animation sequence that can be applied to elements later.
//
//     $name    - The name of your animation.
//     @content - The keyframes of the animation.
@mixin keyframes(
  $name,
  $moz      : $experimental-support-for-mozilla,
  $webkit   : $experimental-support-for-webkit,
  $o        : $experimental-support-for-opera,
  $khtml    : $experimental-support-for-khtml,
  $official : true
) {
  @if $moz and nth($animation-support,1) {
    @include with-only-support-for($moz: true) {
      @-moz-keyframes #{$name} { @content; }
    }
  }
  @if $webkit and nth($animation-support,2) {
    @include with-only-support-for($webkit: true) {
      @-webkit-keyframes #{$name} { @content; }
    }
  }
  @if $o and nth($animation-support,4) {
    @include with-only-support-for($o: true) {
      @-o-keyframes #{$name} { @content; }
    }
  }
  @if $khtml and nth($animation-support,5) {
    @include with-only-support-for($khtml: true) {
      @-khtml-keyframes #{$name} { @content; }
    }
  }
  @if $official {
    @include with-only-support-for {
      @keyframes #{$name} { @content; }
    }
  }
}

/*
// Apply any number of animation names.
@mixin animation-name($name...) {
  $name: set-arglist-default($name, $default-animation-name);
  @include experimental(animation-name, $name, $animation-support...); }

// Apply any number of animation durations.
@mixin animation-duration($duration...) {
  $duration: set-arglist-default($duration, $default-animation-duration);
  @include experimental(animation-duration, $duration, $animation-support...); }

// Apply any number of animation delays.
@mixin animation-delay($delay...) {
  $delay: set-arglist-default($delay, $default-animation-delay);
  @include experimental(animation-delay, $delay, $animation-support...); }

// Apply any number of animation timing functions.
@mixin animation-timing-function($function...) {
  $function: set-arglist-default($function, $default-animation-timing-function);
  @include experimental(animation-timing-function, $function, $animation-support...); }

// Apply any number of animation iteration counts.
@mixin animation-iteration-count($count...) {
  $count: set-arglist-default($count, $default-animation-iteration-count);
  @include experimental(animation-iteration-count, $count, $animation-support...); }

// Apply any number of animation directions.
@mixin animation-direction($direction...) {
  $direction: set-arglist-default($direction, $default-animation-direction);
  @include experimental(animation-direction, $direction, $animation-support...); }

// Apply any number of animation fill modes.
@mixin animation-fill-mode($mode...) {
  $mode: set-arglist-default($mode, $default-animation-fill-mode);
  @include experimental(animation-fill-mode, $mode, $animation-support...); }

// Apply any number of animation play states.
@mixin animation-play-state($state...) {
  $state: set-arglist-default($state, $default-animation-play-state);
  @include experimental(animation-play-state, $state, $animation-support...); }

// Shortcut to apply any number of animations to an element, with all the settings.
//
//     $animation... : Name and settings. [<values> | default]
@mixin animation($animation...) {
  $default: -compass-space-list(compact($default-animation-name $default-animation-duration $default-animation-timing-function $default-animation-delay $default-animation-iteration-count $default-animation-direction $default-animation-fill-mode $default-animation-play-state));
  $animation: set-arglist-default($animation, $default);
  @include experimental(animation, $animation, $animation-support...);
}
 */















// Based on http://www.w3.org/TR/css3-animations/
$default-animation-name: none;
$default-animation-duration: 0;
$default-animation-timing-function: ease;
$default-animation-iteration-count: 1;
$default-animation-direction: normal;
$default-animation-play-state: running;
$default-animation-delay: 0;
$default-animation-fill-mode: none;

@mixin animation-name(
  $name-1: $default-animation-name,
  $name-2: false,
  $name-3: false,
  $name-4: false,
  $name-5: false,
  $name-6: false,
  $name-7: false,
  $name-8: false,
  $name-9: false,
  $name-10: false
) {
  $name: compact($name-1, $name-2, $name-3, $name-4, $name-5, $name-6, $name-7, $name-8, $name-9, $name-10);
  @include experimental(animation-name, $name);
}

@mixin animation-duration(
  $duration-1: $default-animation-duration,
  $duration-2: false,
  $duration-3: false,
  $duration-4: false,
  $duration-5: false,
  $duration-6: false,
  $duration-7: false,
  $duration-8: false,
  $duration-9: false,
  $duration-10: false
) {
  $duration: compact($duration-1, $duration-2, $duration-3, $duration-4, $duration-5, $duration-6, $duration-7, $duration-8, $duration-9, $duration-10);
  @include experimental(animation-duration, $duration);
}

@mixin animation-timing-function(
  $timing-function-1: $default-animation-timing-function,
  $timing-function-2: false,
  $timing-function-3: false,
  $timing-function-4: false,
  $timing-function-5: false,
  $timing-function-6: false,
  $timing-function-7: false,
  $timing-function-8: false,
  $timing-function-9: false,
  $timing-function-10: false
) {
  $timing-function: compact($timing-function-1, $timing-function-2, $timing-function-3, $timing-function-4, $timing-function-5, $timing-function-6, $timing-function-7, $timing-function-8, $timing-function-9, $timing-function-10);
  @include experimental(animation-timing-function, $timing-function);
}

@mixin animation-iteration-count(
  $iteration-count-1: $default-animation-count,
  $iteration-count-2: false,
  $iteration-count-3: false,
  $iteration-count-4: false,
  $iteration-count-5: false,
  $iteration-count-6: false,
  $iteration-count-7: false,
  $iteration-count-8: false,
  $iteration-count-9: false,
  $iteration-count-10: false
) {
  $iteration-count: compact($iteration-count-1, $iteration-count-2, $iteration-count-3, $iteration-count-4, $iteration-count-5, $iteration-count-6, $iteration-count-7, $iteration-count-8, $iteration-count-9, $iteration-count-10);
  @include experimental(animation-iteration-count, $iteration-count);
}

@mixin animation-direction(
  $direction-1: $default-animation-direction,
  $direction-2: false,
  $direction-3: false,
  $direction-4: false,
  $direction-5: false,
  $direction-6: false,
  $direction-7: false,
  $direction-8: false,
  $direction-9: false,
  $direction-10: false
) {
  $direction: compact($direction-1, $direction-2, $direction-3, $direction-4, $direction-5, $direction-6, $direction-7, $direction-8, $direction-9, $direction-10);
  @include experimental(animation-direction, $direction);
}

@mixin animation-play-state(
  $play-state-1: $default-animation-play-state,
  $play-state-2: false,
  $play-state-3: false,
  $play-state-4: false,
  $play-state-5: false,
  $play-state-6: false,
  $play-state-7: false,
  $play-state-8: false,
  $play-state-9: false,
  $play-state-10: false
) {
  $play-state: compact($play-state-1, $play-state-2, $play-state-3, $play-state-4, $play-state-5, $play-state-6, $play-state-7, $play-state-8, $play-state-9, $play-state-10);
  @include experimental(animation-play-state, $play-state);
}

@mixin animation-delay(
  $delay-1: $default-animation-delay,
  $delay-2: false,
  $delay-3: false,
  $delay-4: false,
  $delay-5: false,
  $delay-6: false,
  $delay-7: false,
  $delay-8: false,
  $delay-9: false,
  $delay-10: false
) {
  $delay: compact($delay-1, $delay-2, $delay-3, $delay-4, $delay-5, $delay-6, $delay-7, $delay-8, $delay-9, $delay-10);
  @include experimental(animation-delay, $delay);
}

@mixin animation(
  $animation-1: default,
  $animation-2: false,
  $animation-3: false,
  $animation-4: false,
  $animation-5: false,
  $animation-6: false,
  $animation-7: false,
  $animation-8: false,
  $animation-9: false,
  $animation-10: false
) {
  @if $animation-1 == default {
    $animation-1: -compass-space-list(compact($default-animation-name, $default-animation-duration, $default-animation-timing-function, $default-animation-delay, $default-animation-iteration-count, $default-animation-direction, $default-animation-fill-mode))
  }

  $animation: compact($animation-1, $animation-2, $animation-3, $animation-4, $animation-5, $animation-6, $animation-7, $animation-8, $animation-9, $animation-10);
  @include experimental(animation, $animation);
}

// Simple animation with named arguments
@mixin animation-simple(
  $name: $default-animation-name,
  $duration: $default-animation-duration,
  $timing-function: $default-animation-timing-function,
  $delay: $default-animation-delay,
  $iteration-count: $default-animation-iteration-count,
  $direction: $default-animation-direction
) {
  @include experimental(animation, $name $duration $timing-function $delay $iteration-count $direction);
}

// This one is from https://developer.mozilla.org/en/CSS/animation-fill-mode
@mixin animation-fill-mode($fill-mode) {
  @include experimental(animation-fill-mode, $fill-mode);
}
